1. HELLO WORLD
--------------

* Introduction to Java
--------------------
	- Sun Microsystems. 1995.
	- Simple.
	- Portable.
	- Secure.
	- Robust.

	- Released 20 years ago but still one of the most popular programming languages today.
	
	- Java Virtual Machine: Ensures the same Java code can be run on different operating systems and platforms. "Write once, run everywhere".

	class HelloWorld {                                                                   -----------> UNIX
		public static void main(String[] args) {                                     |
			System.out.println("Hello World!");   -------> Compiler -------> JVM |----------> Windows API
		}                                                                            |
	}                                                                                    ----------> MacOS

	Instructions
	------------
	1. You’re looking at a computer program written in Java.

	Run the code in the text editor to see what is printed to the screen.

===================================================================================================================================================================

HelloWorld.java
---------------
public class HelloWorld {
    public static void main(String[] args) {
      System.out.println("Hello World!");
    }
  }

==================================================================================================================================================================

* Hello Java File!
------------------
	- Java files have a .java extension.
	
	- public class HelloWorld {
 
	  }

	- Each file has one primary class named after the file. Our class name: HelloWorld and our file name: HelloWorld. Every word is capitalized.

	- Inside the class we had a main() method which lists our program tasks:

	- public static void main(String[] args) {
 
	  }	

	- public, static, and void are syntax we’ll learn about in future lessons. String[] args is a placeholder for information we want to pass into our program. This syntax is 
	necessary for the program to run but more advanced than we need to explore at the moment.

	- Our program also displayed the text "Hello World" on the screen. This was accomplished using a print statement:

		System.out.println("Hello World");	

	Instructions
	------------
	1. The text editor has a file, HelloYou.java, that contains a HelloYou class with a main() method.

	Inside main(), add a statement which prints Hello someName!, with your name replacing someName. Make sure to end the statement with a semicolon.

	For example, if your name were “Maria,” the program would print Hello Maria!.

	Checkpoint 2 Passed

	Hint
	----
	Let’s say we want to print Howdy World!.

	Place that message inside double quotes: "Howdy World!".

	Then place the quoted message inside the parentheses of System.out.println().

	System.out.println("Howdy World!");
	The println has the letter l as in “laser”, not the number 1.

	You must use double quotes!

HelloYou.java
-------------
public class HelloYou {
  public static void main(String[] args) {
    System.out.println("Hello Andres!");
  }
}

=================================================================================================================================================================

* Print Statements
------------------
	- Print statements output information to the screen (also referred to as the output terminal). 
	- System.out.println("Hello World");

		. System: built-in Java class that contains useful tools for our programs.
		---------

		. out: short for output.
		------

		. println: is short for "print line".
		----------

	- We can use System.out.println() whenever we want the program to create a new line on the screen after outputting a value:

		System.out.println("Hello World");
		System.out.println("Today is a great day to code!");

	- This program will print each statement on a new line like so:

		Hello World
		Today is a great day to code!

	- We also can output information using System.out.print(). Notice that we’re using print(), not println(). Unlike System.out.println(), this type of print statement outputs 
	everything on the same line. For example:

		System.out.print("Hello ");
		System.out.print("World");

	The above code will have the following output:

		Hello World

	- If you use println() the cursor is moved to the next line. If you use print() the cursor stays on the same line.

=================================================================================================================================================================

* Commenting Code
-----------------
	When comments are short we use the single-line syntax: //.

		// calculate customer satisfaction rating

	When comments are long we use the multi-line syntax: /* and */.

		/*
		We chose to store information across multiple databases to
		minimize the possibility of data loss. We'll need to be careful
		to make sure it does not go out of sync!
		*/

	Another type of commenting option is the Javadoc comment which is represented by /** and */. Javadoc comments are used to create documentation for APIs (Application Programming 
	Interfaces). When writing Javadoc comments, remember that they will eventually be used in the documentation that your users might read, so make sure to be especially thoughtful 
	when writing these comments.

	Javadoc comments are typically written before the declaration of fields, methods, and classes (which we’ll cover later in this course):

		/**
		* The following class accomplishes the following task...
		*/

	Here’s how a comment would look in a complete program:

		/**
		* The following class shows what a comment would look like in a program.
		*/
		public class CommentExample {
  			// I'm a comment inside the class
  			public static void main(String[] args) {
    				// I'm a comment inside a method
    				System.out.println("This program has comments!");
  			}
		}

=================================================================================================================================================================

* Semicolons and Whitespace
---------------------------
	Java does not interpret whitespace, the areas of the code without syntax, but humans use whitespace to read code without difficulty.

	Functionally, these two code samples are identical:

		System.out.println("Java");System.out.println("Lava");System.out.println("Guava");

		System.out.println("Java");
 		System.out.println("Lava");
 		System.out.println("Guava");

	They will print the same text to the screen, but which would you prefer to read? Imagine if it was hundreds of instructions! Whitespace would be essential.

	Java does interpret semicolons. Semicolons are used to mark the end of a statement, one line of code that performs a single task.

	The only statements we’ve seen so far are System.out.println("My message!");.

	Let’s contrast statements with the curly brace, {}. Curly braces mark the scope of our classes and methods. There are no semicolons at the end of a curly brace.

=================================================================================================================================================================

* Compilation: Catching Errors
------------------------------
	Java is a compiled programming language, meaning the code we write in a .java file is transformed into byte code by a compiler before it is executed by the Java Virtual Machine on 
	your computer.

	A compiler is a program that translates human-friendly programming languages into other programming languages that computers can execute.

				MyProgram.java ---> Compiler ---> MyProgram.class ---> JVM 1000101  MyProgram	
											   ------->

	The compiling process catches mistakes before the computer runs our code.

	The Java compiler runs a series of checks while it transforms the code. Code that does not pass these checks will not be compiled.

	For example, with a file called Plankton.java, we could compile it with the terminal command:

		javac Plankton.java

	A successful compilation produces a .class file: Plankton.class, that we execute with the terminal command:

		java Plankton

=================================================================================================================================================================
































	